# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import servers_pb2 as servers__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in servers_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserServiceStub(object):
    """SERVICE

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/UserService/CreateUser',
                request_serializer=servers__pb2.User.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/UserService/UpdateUser',
                request_serializer=servers__pb2.User.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/UserService/DeleteUser',
                request_serializer=servers__pb2.User.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/UserService/ListUsers',
                request_serializer=servers__pb2.Empty.SerializeToString,
                response_deserializer=servers__pb2.UserList.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """SERVICE

    """

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=servers__pb2.User.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=servers__pb2.User.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=servers__pb2.User.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=servers__pb2.Empty.FromString,
                    response_serializer=servers__pb2.UserList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """SERVICE

    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserService/CreateUser',
            servers__pb2.User.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserService/UpdateUser',
            servers__pb2.User.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserService/DeleteUser',
            servers__pb2.User.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserService/ListUsers',
            servers__pb2.Empty.SerializeToString,
            servers__pb2.UserList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AuthServiceStub(object):
    """Login 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/AuthService/Login',
                request_serializer=servers__pb2.LoginRequest.SerializeToString,
                response_deserializer=servers__pb2.LoginResponse.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """Login 
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=servers__pb2.LoginRequest.FromString,
                    response_serializer=servers__pb2.LoginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Login 
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuthService/Login',
            servers__pb2.LoginRequest.SerializeToString,
            servers__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DonationServiceStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDonation = channel.unary_unary(
                '/DonationService/CreateDonation',
                request_serializer=servers__pb2.Donation.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateDonation = channel.unary_unary(
                '/DonationService/UpdateDonation',
                request_serializer=servers__pb2.Donation.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteDonation = channel.unary_unary(
                '/DonationService/DeleteDonation',
                request_serializer=servers__pb2.Donation.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.ListDonations = channel.unary_unary(
                '/DonationService/ListDonations',
                request_serializer=servers__pb2.Empty.SerializeToString,
                response_deserializer=servers__pb2.DonationList.FromString,
                _registered_method=True)


class DonationServiceServicer(object):
    """
    """

    def CreateDonation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDonation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDonation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDonations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DonationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDonation,
                    request_deserializer=servers__pb2.Donation.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'UpdateDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDonation,
                    request_deserializer=servers__pb2.Donation.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'DeleteDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDonation,
                    request_deserializer=servers__pb2.Donation.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'ListDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDonations,
                    request_deserializer=servers__pb2.Empty.FromString,
                    response_serializer=servers__pb2.DonationList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DonationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DonationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DonationService(object):
    """
    """

    @staticmethod
    def CreateDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DonationService/CreateDonation',
            servers__pb2.Donation.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DonationService/UpdateDonation',
            servers__pb2.Donation.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DonationService/DeleteDonation',
            servers__pb2.Donation.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DonationService/ListDonations',
            servers__pb2.Empty.SerializeToString,
            servers__pb2.DonationList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EventServiceStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEvent = channel.unary_unary(
                '/EventService/CreateEvent',
                request_serializer=servers__pb2.Event.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateEvent = channel.unary_unary(
                '/EventService/UpdateEvent',
                request_serializer=servers__pb2.Event.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteEvent = channel.unary_unary(
                '/EventService/DeleteEvent',
                request_serializer=servers__pb2.Event.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.ListEvents = channel.unary_unary(
                '/EventService/ListEvents',
                request_serializer=servers__pb2.Empty.SerializeToString,
                response_deserializer=servers__pb2.EventList.FromString,
                _registered_method=True)
        self.AddUser = channel.unary_unary(
                '/EventService/AddUser',
                request_serializer=servers__pb2.UserEventRequest.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.RemoveUser = channel.unary_unary(
                '/EventService/RemoveUser',
                request_serializer=servers__pb2.UserEventRequest.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)
        self.UseDonations = channel.unary_unary(
                '/EventService/UseDonations',
                request_serializer=servers__pb2.DonationEventRequest.SerializeToString,
                response_deserializer=servers__pb2.Response.FromString,
                _registered_method=True)


class EventServiceServicer(object):
    """
    """

    def CreateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Users
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UseDonations(self, request, context):
        """Donations 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=servers__pb2.Event.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'UpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEvent,
                    request_deserializer=servers__pb2.Event.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=servers__pb2.Event.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'ListEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEvents,
                    request_deserializer=servers__pb2.Empty.FromString,
                    response_serializer=servers__pb2.EventList.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=servers__pb2.UserEventRequest.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'RemoveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUser,
                    request_deserializer=servers__pb2.UserEventRequest.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
            'UseDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.UseDonations,
                    request_deserializer=servers__pb2.DonationEventRequest.FromString,
                    response_serializer=servers__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('EventService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """
    """

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/CreateEvent',
            servers__pb2.Event.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/UpdateEvent',
            servers__pb2.Event.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/DeleteEvent',
            servers__pb2.Event.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/ListEvents',
            servers__pb2.Empty.SerializeToString,
            servers__pb2.EventList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/AddUser',
            servers__pb2.UserEventRequest.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/RemoveUser',
            servers__pb2.UserEventRequest.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UseDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/UseDonations',
            servers__pb2.DonationEventRequest.SerializeToString,
            servers__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
