# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import services_pb2.event_pb2 as event__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in event_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EventServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEvent = channel.unary_unary(
                '/event.EventService/CreateEvent',
                request_serializer=event__pb2.Event.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateEvent = channel.unary_unary(
                '/event.EventService/UpdateEvent',
                request_serializer=event__pb2.Event.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteEvent = channel.unary_unary(
                '/event.EventService/DeleteEvent',
                request_serializer=event__pb2.Event.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.ListEvents = channel.unary_unary(
                '/event.EventService/ListEvents',
                request_serializer=event__pb2.Empty.SerializeToString,
                response_deserializer=event__pb2.EventList.FromString,
                _registered_method=True)
        self.AddUser = channel.unary_unary(
                '/event.EventService/AddUser',
                request_serializer=event__pb2.UserEventRequest.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.RemoveUser = channel.unary_unary(
                '/event.EventService/RemoveUser',
                request_serializer=event__pb2.UserEventRequest.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.UseDonations = channel.unary_unary(
                '/event.EventService/UseDonations',
                request_serializer=event__pb2.DonationEventRequest.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.PublishSolidarityEvent = channel.unary_unary(
                '/event.EventService/PublishSolidarityEvent',
                request_serializer=event__pb2.SolidarityEventRequest.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.CancelSolidarityEvent = channel.unary_unary(
                '/event.EventService/CancelSolidarityEvent',
                request_serializer=event__pb2.EventCancellationRequest.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.ListExternalEvents = channel.unary_unary(
                '/event.EventService/ListExternalEvents',
                request_serializer=event__pb2.Empty.SerializeToString,
                response_deserializer=event__pb2.EventList.FromString,
                _registered_method=True)
        self.AdhereToEvent = channel.unary_unary(
                '/event.EventService/AdhereToEvent',
                request_serializer=event__pb2.EventAdhesionRequest.SerializeToString,
                response_deserializer=event__pb2.Response.FromString,
                _registered_method=True)
        self.ListEventAdhesions = channel.unary_unary(
                '/event.EventService/ListEventAdhesions',
                request_serializer=event__pb2.Empty.SerializeToString,
                response_deserializer=event__pb2.EventAdhesionList.FromString,
                _registered_method=True)


class EventServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Users
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UseDonations(self, request, context):
        """Donations 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishSolidarityEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelSolidarityEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExternalEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdhereToEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEventAdhesions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=event__pb2.Event.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'UpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEvent,
                    request_deserializer=event__pb2.Event.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=event__pb2.Event.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'ListEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEvents,
                    request_deserializer=event__pb2.Empty.FromString,
                    response_serializer=event__pb2.EventList.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=event__pb2.UserEventRequest.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'RemoveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUser,
                    request_deserializer=event__pb2.UserEventRequest.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'UseDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.UseDonations,
                    request_deserializer=event__pb2.DonationEventRequest.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'PublishSolidarityEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishSolidarityEvent,
                    request_deserializer=event__pb2.SolidarityEventRequest.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'CancelSolidarityEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelSolidarityEvent,
                    request_deserializer=event__pb2.EventCancellationRequest.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'ListExternalEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExternalEvents,
                    request_deserializer=event__pb2.Empty.FromString,
                    response_serializer=event__pb2.EventList.SerializeToString,
            ),
            'AdhereToEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AdhereToEvent,
                    request_deserializer=event__pb2.EventAdhesionRequest.FromString,
                    response_serializer=event__pb2.Response.SerializeToString,
            ),
            'ListEventAdhesions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEventAdhesions,
                    request_deserializer=event__pb2.Empty.FromString,
                    response_serializer=event__pb2.EventAdhesionList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'event.EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('event.EventService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/CreateEvent',
            event__pb2.Event.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/UpdateEvent',
            event__pb2.Event.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/DeleteEvent',
            event__pb2.Event.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/ListEvents',
            event__pb2.Empty.SerializeToString,
            event__pb2.EventList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/AddUser',
            event__pb2.UserEventRequest.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/RemoveUser',
            event__pb2.UserEventRequest.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UseDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/UseDonations',
            event__pb2.DonationEventRequest.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishSolidarityEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/PublishSolidarityEvent',
            event__pb2.SolidarityEventRequest.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelSolidarityEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/CancelSolidarityEvent',
            event__pb2.EventCancellationRequest.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListExternalEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/ListExternalEvents',
            event__pb2.Empty.SerializeToString,
            event__pb2.EventList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AdhereToEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/AdhereToEvent',
            event__pb2.EventAdhesionRequest.SerializeToString,
            event__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEventAdhesions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event.EventService/ListEventAdhesions',
            event__pb2.Empty.SerializeToString,
            event__pb2.EventAdhesionList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
