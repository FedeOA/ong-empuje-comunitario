# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import services_pb2.donation_pb2 as donation__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in donation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DonationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDonation = channel.unary_unary(
                '/donation.DonationService/CreateDonation',
                request_serializer=donation__pb2.Donation.SerializeToString,
                response_deserializer=donation__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateDonation = channel.unary_unary(
                '/donation.DonationService/UpdateDonation',
                request_serializer=donation__pb2.Donation.SerializeToString,
                response_deserializer=donation__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteDonation = channel.unary_unary(
                '/donation.DonationService/DeleteDonation',
                request_serializer=donation__pb2.Donation.SerializeToString,
                response_deserializer=donation__pb2.Response.FromString,
                _registered_method=True)
        self.ListDonations = channel.unary_unary(
                '/donation.DonationService/ListDonations',
                request_serializer=donation__pb2.Empty.SerializeToString,
                response_deserializer=donation__pb2.DonationList.FromString,
                _registered_method=True)


class DonationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDonation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDonation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDonation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDonations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DonationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDonation,
                    request_deserializer=donation__pb2.Donation.FromString,
                    response_serializer=donation__pb2.Response.SerializeToString,
            ),
            'UpdateDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDonation,
                    request_deserializer=donation__pb2.Donation.FromString,
                    response_serializer=donation__pb2.Response.SerializeToString,
            ),
            'DeleteDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDonation,
                    request_deserializer=donation__pb2.Donation.FromString,
                    response_serializer=donation__pb2.Response.SerializeToString,
            ),
            'ListDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDonations,
                    request_deserializer=donation__pb2.Empty.FromString,
                    response_serializer=donation__pb2.DonationList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'donation.DonationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('donation.DonationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DonationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/donation.DonationService/CreateDonation',
            donation__pb2.Donation.SerializeToString,
            donation__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/donation.DonationService/UpdateDonation',
            donation__pb2.Donation.SerializeToString,
            donation__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/donation.DonationService/DeleteDonation',
            donation__pb2.Donation.SerializeToString,
            donation__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/donation.DonationService/ListDonations',
            donation__pb2.Empty.SerializeToString,
            donation__pb2.DonationList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
